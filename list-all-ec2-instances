#!/usr/bin/env python3

import argparse
from collections import defaultdict
from datetime import datetime
import os
import subprocess
import sys

import boto3

parser = argparse.ArgumentParser(description='List all EC2 instances in all regions')

parser.add_argument('--print-tags', action='store_true')
parser.add_argument('region_prefix', nargs='*')

args = parser.parse_args()


def tput(*args):
    p = subprocess.run(['tput'] + list(args), capture_output=True)
    return(p.stdout)

color = {
        'terminated':tput('setaf','0'),
        'stopped':tput('setaf','1'),
        'running':tput('setaf','2'),
        'pending':tput('setaf','3'),
        'shutting-down':tput('setaf','9'),
        'bold':tput('bold'),
        'reset':tput('sgr0'),
        }

def write(*args):
    for arg in args:
        if type(arg) == str:
            arg = arg.encode()
        sys.stdout.buffer.write(arg)
    sys.stdout.buffer.write(color['reset'])
    print()

ec2 = boto3.client('ec2')
regions = ec2.describe_regions()

for region in regions['Regions']:
    region_name=region['RegionName']
    if args.region_prefix:
        for p in args.region_prefix:
            if region_name.startswith(p):
                break
        else:
            continue
    write(color.get('bold'), region_name)
    region_client = boto3.client('ec2', region_name=region_name)
    instances = region_client.describe_instances()
    launch_templates = region_client.describe_launch_templates()
    lt = dict()
    for l in launch_templates['LaunchTemplates']:
        lt[l['LaunchTemplateId']]=l['CreatedBy']
    for r in instances['Reservations']:
        for i in r['Instances']:
            extra=[]
            for t in i.get('Tags',[]):
                if t['Key'] == 'aws:ec2launchtemplate:id' and lt.get(t['Value']):
                    extra.append(lt.get(t['Value']))
            write(color.get(i['State']['Name'],''), '\t'.join([
                i['Placement']['AvailabilityZone'],
                i['LaunchTime'].isoformat(),
                i.get('KeyName','<nokey>'),
                i['InstanceId'],
                i['InstanceType'],
                i['State']['Name'],
                ] + extra))
            if args.print_tags and i.get('Tags'):
                for t in i.get('Tags'):
                    print('\t{}: {}'.format(t['Key'], t['Value']))

